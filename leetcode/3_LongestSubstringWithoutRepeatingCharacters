/* Problem Statement:

Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 

*/

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int max = 0;
        int cur = 0;
        
        char[] c = s.toCharArray();
        HashMap<Character, Integer> map = new HashMap<>();
        
        for(int i = 0; i < c.length; i++){
            if(map.containsKey(c[i])){
                cur = Math.max(map.get(s.charAt(i)), cur);
            } 
            max = Math.max(max, i - cur + 1);
            map.put(c[i], i +  1);
        }
        return max;
    }
}
