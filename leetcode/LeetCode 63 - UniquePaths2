/* Problem Statement:

A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

Note: m and n will be at most 100.

Example 1:

Input:
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
Output: 2
Explanation:
There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right

*/

class Solution {
    
    // Iterative Approach
    /*public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        // if starting point is itself not a valid cell
        int m = obstacleGrid.length;
        if(m == 0 || obstacleGrid[0][0] == 1){
            return 0;
        }
        int n = obstacleGrid[0].length;
        int[][] ways = new int[m][n];
        ways[0][0] = 1;
        boolean found = false;
        // populate first row
        for(int i = 1; i < n; i++){
            if(!found && obstacleGrid[0][i] != 1){
                ways[0][i] = 1;
            }else{
                ways[0][i] = 0;
                found = true;
            }
        }
        found = false;
        // populate first column
        for(int i = 1; i < m; i++){
            if(!found && obstacleGrid[i][0] != 1){
                ways[i][0] = 1;
            } else{
                ways[i][0] = 0;
                found = true;
            }
        }
        // populate rest of the grid
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                if(obstacleGrid[i][j] != 1){
                    ways[i][j] = ways[i -1][j] + ways[i][j-1];
                } else {
                    ways[i][j] = 0;
                }
            }
        }
        return ways[m-1][n-1];
    }*/
    
    // Dynamic Programming
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        // if starting point is itself not a valid cell
        if(obstacleGrid[0][0] == 1){
            return 0;
        }
        int m = obstacleGrid.length - 1;
        int n = obstacleGrid[m].length - 1;
        HashMap<String, Integer> ways = new HashMap<>();
        return uniquePaths(obstacleGrid, m, n, ways);
    }
    
    public int uniquePaths(int[][] grid, int m, int n, HashMap<String, Integer> ways){
        if(m < 0 || n < 0 || grid[m][n] == 1){
            return 0;
        } else if(m == 0 && n == 0){
            return 1;
        }
        String key = m + "," +n;
        if(ways.containsKey(key)){
            return ways.get(key);
        } 
        int totalWays = uniquePaths(grid, m, n-1, ways) + uniquePaths(grid, m-1, n, ways);
        ways.put(key, totalWays);
        return totalWays;
    }
}
