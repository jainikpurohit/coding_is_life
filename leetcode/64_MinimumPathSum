/* Problem Statement:

Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.

*/

// solved using recursion first and then used "memo array" for dynamic programming

class Solution {
    public int minPathSum(int[][] grid) {
        if(grid.length == 0){
            return 0;
        }
        int rl = grid.length;
        int cl = grid[0].length;
        int[][] memo = new int[rl][cl];
        for(int[] m : memo){
            Arrays.fill(m, -1);
        }
        return sumHelper(grid, rl - 1, cl - 1, memo);   
    }
    
    public int sumHelper(int[][] grid, int i, int j, int[][] memo){
        int cur = grid[i][j];
        int sum;
        if(memo[i][j] > -1){
            return memo[i][j];
        }
        if(i == 0 && j == 0){
            sum = cur;
        } else if(j == 0){
            sum = sumHelper(grid, i - 1, j, memo) + cur;
        } else if(i == 0){
            sum = sumHelper(grid, i, j - 1, memo) + cur;
        } else {
            sum = Math.min(sumHelper(grid, i - 1, j, memo), sumHelper(grid, i, j - 1, memo))  + cur;
        }
        memo[i][j] = sum;
        return sum;
    }
}
