/* Problem Statement:

Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]


*/


class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> results = new ArrayList<>();
        
        if(matrix.length == 0){
            return results;
        }
        int rs = 0, cs =0, re = matrix.length -1, ce = matrix[0].length - 1;
        
        while(rs <= re && cs <= ce){
            // Forward
            for(int rf = cs; rf <= ce; rf++){
                results.add(matrix[rs][rf]);
            }
            // Downward
            for(int cd = rs + 1; cd <= re; cd++){
                results.add(matrix[cd][ce]);
            }
            if(rs < re && cs < ce){
                // Backward
                for(int rb = ce - 1; rb >= cs; rb--){
                    results.add(matrix[re][rb]);
                }
                // Upward
                for(int cu = re - 1; cu > rs; cu--){
                    results.add(matrix[cu][cs]);
                }
            }

            rs++;
            cs++;
            re--;
            ce--;
        }
        return results;
    }
}
