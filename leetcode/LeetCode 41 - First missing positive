/* Problem Statement:

Given an unsorted integer array, find the smallest missing positive integer.

Example 1:

Input: [1,2,0]
Output: 3
Example 2:

Input: [3,4,-1,1]
Output: 2
Example 3:

Input: [7,8,9,11,12]
Output: 1
Note:

Your algorithm should run in O(n) time and uses constant extra space.

*/

class Solution {
    public int firstMissingPositive(int[] nums) {
        
        // to ignore negative and out of range numbers
        for(int n = 0; n < nums.length; n++){
            if(nums[n] <= 0 || nums[n] > nums.length){
                nums[n] = nums.length + 1;
            }
        }
        
        // invert equivalent indexes
        for(int i = 0; i < nums.length; i++){
            int n = Math.abs(nums[i]);
            if(n > nums.length){
                continue;
            }
            n--;
            
            if(nums[n] > 0){
                nums[n] = -1 * nums[n];
            }
        }
        
        // find an index with a positive number
        for(int i = 0; i < nums.length; i++){
            if(nums[i] > 0){
                return i + 1;
            }
        }
        
        return nums.length + 1;
    }
}
