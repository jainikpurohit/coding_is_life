/* Problem Statement:

Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> traverseList = new ArrayList<>();
        
        if(root == null){
            return traverseList;
        }
        
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        
        int nodeCount = 0;
        
        while(!q.isEmpty()){
            
            nodeCount = q.size();
            List<Integer> levelList = new ArrayList<>();
            
            while(nodeCount > 0){
                TreeNode current = q.poll();
                levelList.add(current.val);
                
                TreeNode lc = current.left;
                TreeNode rc = current.right;
                if(lc != null){
                    q.add(lc);                    
                }
                if(rc != null){
                    q.add(rc);
                }
                nodeCount--;
            }
            traverseList.add(levelList);
        }
        return traverseList;
    }
}
