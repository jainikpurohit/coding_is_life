/* Problem Statement:

Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?

*/

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        
        ListNode first = head;
        ListNode second = head;
        
        while(second != null && second.next != null){
            first = first.next;
            second = second.next.next;
            if(first == second){
                return true;
            }
        }
    
        
        //HashSet<Integer> set = new HashSet<>();
        // while(head != null){
        //     if(set.contains(head.val)){
        //         return true;
        //     }
        //     set.add(head.val);
        //     head = head.next;
        // }
        
        return false;
    }
}
